#!/usr/bin/env python3
import os
import sys
import argparse
from colorama import init, Fore, Back, Style

# Initialize colorama for cross-platform color support
init(autoreset=True)

# Color and styling utilities
class Colors:
    HEADER = Fore.CYAN + Style.BRIGHT
    SUCCESS = Fore.GREEN + Style.BRIGHT
    WARNING = Fore.YELLOW + Style.BRIGHT
    ERROR = Fore.RED + Style.BRIGHT
    INFO = Fore.BLUE + Style.BRIGHT
    REPO_NAME = Fore.MAGENTA + Style.BRIGHT
    STARS = Fore.YELLOW + Style.BRIGHT
    FILES = Fore.GREEN
    URL = Fore.BLUE + Style.DIM
    DESCRIPTION = Fore.WHITE + Style.DIM
    RESET = Style.RESET_ALL

def print_banner():
    """Print a colorful banner for the tool"""
    banner = f"""
{Colors.HEADER}╔══════════════════════════════════════════════════════════════╗
║                          📡 SCANIPY                          ║
║              Code Pattern Scanner for GitHub                 ║
╚══════════════════════════════════════════════════════════════╝{Colors.RESET}
"""
    print(banner)

def print_search_info(query, language, extension, pages):
    """Print search parameters in a formatted way"""
    print(f"{Colors.INFO}🔍 Search Parameters:{Colors.RESET}")
    print(f"   {Colors.INFO}•{Colors.RESET} Query: {Colors.WARNING}'{query}'{Colors.RESET}")
    if language:
        print(f"   {Colors.INFO}•{Colors.RESET} Language: {Colors.SUCCESS}{language}{Colors.RESET}")
    if extension:
        print(f"   {Colors.INFO}•{Colors.RESET} Extension: {Colors.SUCCESS}{extension}{Colors.RESET}")
    print(f"   {Colors.INFO}•{Colors.RESET} Max Pages: {Colors.WARNING}{pages}{Colors.RESET}")
    print()

def format_star_count(stars):
    """Format star count with appropriate color and formatting"""
    if stars == 'N/A':
        return f"{Colors.WARNING}N/A{Colors.RESET}"
    elif stars >= 10000:
        return f"{Colors.SUCCESS}⭐ {stars:,}{Colors.RESET}"
    elif stars >= 1000:
        return f"{Colors.STARS}⭐ {stars:,}{Colors.RESET}"
    else:
        return f"{Colors.WARNING}⭐ {stars}{Colors.RESET}"

def print_repository(index, repo, query):
    """Print a single repository with colorful formatting"""
    # Repository header
    print(f"{Colors.HEADER}{'─' * 80}{Colors.RESET}")
    print(f"{Colors.INFO}{index:2d}.{Colors.RESET} {Colors.REPO_NAME}{repo['name']}{Colors.RESET} {format_star_count(repo.get('stars', 'N/A'))}")
    
    # Description
    if repo.get('description'):
        desc = repo['description']
        if len(desc) > 100:
            desc = desc[:97] + "..."
        print(f"    {Colors.DESCRIPTION}📝 {desc}{Colors.RESET}")
    
    # File count
    file_count = len(repo['files'])
    if file_count > 0:
        print(f"    {Colors.FILES}📁 {file_count} file{'s' if file_count != 1 else ''} containing '{query}'{Colors.RESET}")
        
        # Show files
        for i, file in enumerate(repo['files'][:3]):
            print(f"    {Colors.FILES}├─{Colors.RESET} {file['path']}")
        
        if len(repo['files']) > 3:
            remaining = len(repo['files']) - 3
            print(f"    {Colors.FILES}└─{Colors.RESET} {Colors.WARNING}... and {remaining} more file{'s' if remaining != 1 else ''}{Colors.RESET}")
    
    # URL
    if repo.get('url'):
        print(f"    {Colors.URL}🔗 {repo['url']}{Colors.RESET}")
    
    print()

def setup_argparser():
    parser = argparse.ArgumentParser(
    description='Search for open source repositories containing specific code patterns and sort by stars.',
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog='''
Examples:

    # Search for a pattern
    scanoss --query "eval("
    
    # Search for a specific language
    scanoss --query "pickle.loads" --language python
  
    # Search with a higher page limit 
    scanoss --query "pickle.loads" --pages 10
  
    # Search in specific file types
    scanoss --query "os.system" --language python --extension ".py"
  
    # Search with additional filters
    scanoss --query "subprocess.call" --additional-params "stars:>100"
    '''
    )

    # Search query parameters
    parser.add_argument(
        '--query', '-q',
        required=True,
        help='Code pattern to search for (e.g., "pickle.loads")'
    )
    parser.add_argument(
        '--language', '-l',
        default='',
        help='Programming language to search in (e.g., python)'
    )
    parser.add_argument(
        '--extension', '-e',
        default='',
        help='File extension to search in (e.g., ".py", ".ipynb")'
    )
    parser.add_argument(
        '--additional-params',
        default='',
        help='Additional search parameters (e.g., "stars:>100 -org:microsoft")'
    )
    # Pagination and limits
    parser.add_argument(
        '--pages', '-p',
        type=int,
        default=5,
        help='Maximum number of pages to retrieve (default: 5, max 10 pages = 1000 results)'
    )
    # GitHub API authentication
    parser.add_argument(
        '--github-token',
        help='GitHub personal access token (also can be set via GITHUB_TOKEN env variable)'
    )
    # Output options
    parser.add_argument(
        '--output', '-o',
        default='repos.json',
        help='Output JSON file path (default: repos.json)'
    )
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='Enable verbose output'
    )
    args = parser.parse_args()
    
    # Build the complete search query
    query_parts = []
    if args.query:
        query_parts.append(args.query)
    if args.language:
        query_parts.append(f"language:{args.language}")
    if args.extension:
        query_parts.append(f"extension:{args.extension}")
    if args.additional_params:
        query_parts.append(args.additional_params)
    args.full_query = " ".join(query_parts)
    
    return args

if __name__ == "__main__":
    args = setup_argparser()
    
    # Check if GITHUB_TOKEN is set in environment variables
    if not args.github_token:
        args.github_token = os.getenv("GITHUB_TOKEN")
    
    if not args.github_token:
        print("Error: GITHUB_TOKEN environment variable or --github-token argument must be set.")
        sys.exit(1)
    
    # Initialize GitHub API client
    from github import RestAPI as GHRest
    from github import GraphQLAPI as GHGraphQL
    ghrest = GHRest(token=args.github_token)
    ghrest.search(args.query, language=args.language, extension=args.extension, per_page=100, max_pages=args.pages)
    repos = ghrest.repositories
    
    
    ghgraphql = GHGraphQL(token=args.github_token, repositories=repos)
    ghgraphql.batch_query()
    
    repos = ghgraphql.repositories
    
    repo_list = list(repos.values())
    repo_list.sort(key=lambda x: x.get("stars", 0), reverse=True)
    
    print_banner()
    
    # Print search information
    print_search_info(args.query, args.language, args.extension, args.pages)
    
    # Print top repositories
    print(f"{Colors.INFO}TOP REPOSITORIES BY STARS:{Colors.RESET}")
    for i, repo in enumerate(repo_list[:20], 1):
        print_repository(i, repo, args.query)

